# Importamos las librer√≠as necesarias
import streamlit as st
from pathlib import Path

# Importamos funciones auxiliares desde m√≥dulos propios
from utils.helpers import create_platform_metrics 
from components.ui_elements import display_platform_overview

# Definimos la ruta base donde se encuentran los archivos de visualizaci√≥n
BASE_PLOT_PATH = Path("static_data/plots") / "platforms"

# Funci√≥n que genera la barra lateral del dashboard
def render_sidebar(platforms):
    with st.sidebar:
        # T√≠tulo del panel
        st.markdown("### üóÇÔ∏è Panel de Control")
        st.markdown("---")

        # Selector de plataformas
        st.markdown("**Selecciona una plataforma:**")
        selected_platform = st.selectbox(
            "Plataformas disponibles",
            platforms,
            help="Elige la plataforma que deseas analizar"
        )

        st.markdown("---")

        # Informaci√≥n general
        st.markdown("### üìä Informaci√≥n")
        st.info(f"**{len(platforms)}** plataformas disponibles")

        # Secci√≥n de ayuda desplegable
        st.markdown("### üí° Ayuda")
        with st.expander("¬øC√≥mo usar el dashboard?"):
            st.markdown("""
            1. **Selecciona** una plataforma del men√∫
            2. **Explora** las pesta√±as disponibles
            3. **Analiza** las visualizaciones
            4. **Compara** diferentes clusters
            """)
    return selected_platform


# Funci√≥n principal que muestra la p√°gina
def show_page():
    """Dashboard principal de an√°lisis de plataformas"""

    # T√≠tulo del dashboard con estilos HTML
    st.markdown("""
        <h1 class="main-title">
            üìä Dashboard de An√°lisis de Plataformas
        </h1>
        <p style="text-align: center; color: var(--text-secondary); font-size: 1.1rem; margin-bottom: 2rem;">
            Explora las comunidades identificadas en cada plataforma digital
        </p>
    """, unsafe_allow_html=True)

    st.markdown("---")
    
    # Validaci√≥n de existencia de la carpeta de datos
    if not BASE_PLOT_PATH.exists():
        st.error(f"‚ùå No se encontr√≥ la carpeta de datos. Aseg√∫rate de que existe: `{BASE_PLOT_PATH}`")
        st.info(f"üìÅ Estructura esperada: `{BASE_PLOT_PATH}/[nombre_plataforma]/`")
        return

    # Cargamos los nombres de las plataformas desde las carpetas
    try:
        platforms = [d.name for d in BASE_PLOT_PATH.iterdir() 
                    if d.is_dir() and not d.name.startswith('.')]

        if not platforms:
            st.warning("‚ö†Ô∏è No se encontraron plataformas en la carpeta de datos.")
            return

    except Exception as e:
        st.error(f"Error al cargar plataformas: {e}")
        return

    # Mostramos la barra lateral y obtenemos la plataforma seleccionada
    selected_platform = render_sidebar(platforms)

    if selected_platform:
        # Ruta a la carpeta espec√≠fica de la plataforma
        platform_folder = BASE_PLOT_PATH / selected_platform
        metrics = create_platform_metrics(platform_folder)  # C√°lculo de m√©tricas

        # Mostramos la informaci√≥n general de la plataforma
        display_platform_overview(selected_platform, metrics)

        # Pesta√±as para diferentes an√°lisis
        tab1, tab2, tab3 = st.tabs([
            "üåê Red de Usuarios", 
            "üìà An√°lisis de Densidad", 
            "üß† Exploraci√≥n de Comunidades"
        ])

        # TAB 1: Visualizaci√≥n de la red de usuarios
        with tab1:
            st.markdown('<p class="section-header">Red de Conexiones de Usuarios</p>', unsafe_allow_html=True)
            network_file = platform_folder / "network_plot.html"
            if network_file.exists():
                try:
                    with open(network_file, 'r', encoding='utf-8') as f:
                        html_network = f.read()
                    st.markdown("""
                        <div class="info-card">
                            <p style="color: var(--text-secondary); margin-bottom: 1rem;">
                                Esta visualizaci√≥n muestra las conexiones entre usuarios basadas en similitud discursiva.
                                Los nodos representan usuarios y las conexiones indican similitudes en el contenido.
                            </p>
                        </div>
                    """, unsafe_allow_html=True)
                    st.components.v1.html(html_network, height=650, scrolling=True)
                except Exception as e:
                    st.error(f"Error al cargar la visualizaci√≥n de red: {e}")
            else:
                st.warning("‚ö†Ô∏è Visualizaci√≥n de red no disponible para esta plataforma.")
                st.info("üí° Genera el archivo `network_plot.html` para ver esta visualizaci√≥n.")

        # TAB 2: Visualizaci√≥n del an√°lisis de densidad
        with tab2:
            st.markdown('<p class="section-header">An√°lisis de Densidad de Usuarios</p>', unsafe_allow_html=True)
            density_file = platform_folder / "density_plot.html"
            if density_file.exists():
                try:
                    with open(density_file, 'r', encoding='utf-8') as f:
                        html_density = f.read()
                    st.markdown("""
                        <div class="info-card">
                            <p style="color: var(--text-secondary); margin-bottom: 1rem;">
                                El an√°lisis de densidad muestra la distribuci√≥n espacial de usuarios y 
                                la concentraci√≥n de actividad en diferentes regiones de la red.
                            </p>
                        </div>
                    """, unsafe_allow_html=True)
                    st.components.v1.html(html_density, height=650, scrolling=True)
                except Exception as e:
                    st.error(f"Error al cargar la visualizaci√≥n de densidad: {e}")
            else:
                st.info("üìä An√°lisis de densidad no disponible para esta plataforma.")
                st.info("üí° Genera el archivo `density_plot.html` para ver esta visualizaci√≥n.")

        # TAB 3: Exploraci√≥n detallada de comunidades (clusters)
        with tab3:
            st.markdown('<p class="section-header">Exploraci√≥n Detallada de Comunidades</p>', unsafe_allow_html=True)
            clusters_folder = platform_folder / "clusters"
            if clusters_folder.exists():
                # Obtenemos archivos de clusters disponibles y limpiamos nombres
                cluster_files = sorted([
                    f.name for f in clusters_folder.iterdir()
                    if f.name.startswith("cluster_") and f.name.endswith(".html")
                ])

                # Creamos lista con nombres limpios para mostrar sin prefijo ni extensi√≥n
                cluster_names = [f.replace("cluster_", "").replace(".html", "") for f in cluster_files]

                if cluster_files:
                    st.markdown("""
                        <div class="info-card">
                            <p style="color: var(--text-secondary); margin-bottom: 1rem;">
                                Los clusters agrupan usuarios con patrones discursivos similares. 
                                Cada cluster incluye una nube de palabras y visualizaci√≥n interactiva.
                            </p>
                        </div>
                    """, unsafe_allow_html=True)

                    # Selecci√≥n del cluster por nombre limpio
                    col1, col2 = st.columns([2, 1])
                    with col1:
                        selected_cluster_name = st.selectbox(
                            "Selecciona un cluster para explorar:",
                            cluster_names,
                            help="Cada cluster representa un grupo de usuarios con patrones similares"
                        )
                    with col2:
                        st.metric("N√∫mero de Comunidades encontradas", len(cluster_files))

                    if selected_cluster_name:
                        # Construimos el nombre del archivo a partir del nombre limpio seleccionado
                        selected_cluster_file = f"cluster_{selected_cluster_name}.html"
                        cluster_path = clusters_folder / selected_cluster_file
                        wordcloud_file = clusters_folder / f"wordcloud_{selected_cluster_name}.png"

                        # Mostramos la visualizaci√≥n interactiva del cluster
                        st.markdown("#### üìä Visualizaci√≥n Interactiva de la Comunidad")
                        try:
                            with open(cluster_path, 'r', encoding='utf-8') as f:
                                html_cluster = f.read()
                            st.components.v1.html(html_cluster, height=650, scrolling=True)
                        except Exception as e:
                            st.error(f"Error al cargar la visualizaci√≥n de la Comunidad: {e}")

                        if wordcloud_file.exists():
                            st.markdown("#### üè∑Ô∏è Nube de Palabras de la Comunidad")
                            img_col1, img_col2, img_col3 = st.columns([1, 3, 1])
                            with img_col2:
                                st.image(
                                    str(wordcloud_file), 
                                    caption=f"T√©rminos m√°s relevantes - Comunidad {selected_cluster_name}",
                                )
                else:
                    st.warning("‚ö†Ô∏è No se encontraron archivos de clusters para esta plataforma.")
                    st.info("üí° Genera los archivos de clusters para explorar esta funcionalidad.")
            else:
                st.warning("üìÅ No existe la carpeta de clusters para esta plataforma.")
                st.info(f"üí° Crea la estructura: `{BASE_PLOT_PATH}/[plataforma]/clusters/`")